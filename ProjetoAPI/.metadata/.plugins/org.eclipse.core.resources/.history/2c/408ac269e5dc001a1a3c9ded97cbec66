package br.ce.inmetrics.rest.tests;

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

import org.hamcrest.Matchers;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import br.ce.inmetrics.rest.core.BaseTest;


@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class InmetricsTest extends BaseTest {
	

	
	@Test
	public void t01_listarTodosUsuariosCadastrados() {
		given()
		.when()
			.get("/acesso/list_all")
		.then()
			.statusCode(200)
			.body("$", hasSize(2))
			.body("acessoId", Matchers.contains(10, 11))
	;
	}
	
	@Test
	public void t02_listarUsuarioCadastrado() {
		given()
		.when()
			.get("/acesso/list/10")
		.then()
			.statusCode(202)
			.body("acessoId", Matchers.is(10))
	;
	}
	
	@Test
	public void t03_alterarUsuario() {
		given()
			.body("{\"email\": \"teste1@teste.com.br\"}")
			.body("{\"password\": \"123456\"}")
			.body("{\"empregadoId\": \"100\"}")
		.when()
			.put("/acesso/alterar/11")
		.then()
			.statusCode(200)
			.body("email", Matchers.is("não é um endereço de e-mail"))
	;
	}
	
	@Test
	public void t04_cadastrarUsuario() {
		given()
			.body("{\"email\": \"teste@teste.com.br\"}")
			.body("{\"password\": \"teste123\"}")
		.when()
			.post("/acesso/cadastrar")
		.then()
			.log().all()
			.statusCode(200)
	;
	}
	
}
